@model Dictionary<DayOfWeek, Dictionary<int, List<CalendarEvent>>>


<!DOCTYPE html>
<html>

<head>

    <title>Schedule</title>
    <style>
        /* Add border-collapse to the table */
        .table {
            border-collapse: collapse;
            width: 100%;
        }

        /* Style for table header */
        .table th {
            background-color: #f2f2f2;
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: left;
        }

        /* Style for table cells */
        .table td {
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: left;
        }

        /* Style for time column */
        .time-column {
            width: 120px;
        }

        /* Style for day columns */
        .day-column {
            width: calc((100% - 100px) / 7);
            /* Divide remaining width equally among day columns */
        }

        /* Style when cursor hovers over day columns */
        .day-column:hover {
            background-color: #f0f0f0;
            /* Light gray background color */
        }
    </style>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</head>

<body>

    <h2>Schedule</h2>

    <table class="table">
        <thead>
            <tr>
                <th class="time-column">Time</th> <!-- Set fixed width for the time column -->
                @foreach (DayOfWeek dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
                {
                    <th class="day-column">@dayOfWeek.ToString().Substring(0, 3)</th>
                    <!-- Set fixed width for the day columns -->
                }
            </tr>
        </thead>

        <tbody>
            @for (int hour = 6; hour < 20; hour++)
            {
                <tr>
                    <td class="time-column">@hour:00 - @(hour + 1):00</td>
                    @foreach (DayOfWeek dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
                    {
                        // Retrieve the events for the day of the week and hour
                        var eventsForHour = Model.TryGetValue(dayOfWeek, out var eventsForDay)
                        && eventsForDay.TryGetValue(hour, out var events)
                        ? events
                        : new List<CalendarEvent>();

                        // Retrieve the event for the logged-in employee
                        var eventForHour = eventsForHour.FirstOrDefault();

                        // Render the cell based on the retrieved event
                        <td class="day-column"
                            onclick="showPopup(@hour, '@dayOfWeek', '@(eventForHour?.AvailabilityStatus ?? "Unavailable")', @(eventForHour?.CalendarEventId ?? 0))">
                            @if (eventForHour != null)
                            {
                                <div>@eventForHour.AvailabilityStatus</div>
                            }
                            else
                            {
                                <div class="empty-cell">&nbsp;</div> <!-- Placeholder for empty cell -->
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>

    </table>

    <!-- Popup modal -->
    <div id="popupModal" class="modal fade" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Event Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="eventDetails"></p>
                    <!-- Form for changing status -->
                    <form id="changeStatusForm" method="post" onsubmit="submitChangeStatus(event)">
                        <input type="hidden" id="eventId" name="eventId">
                        <input type="hidden" id="hour" name="hour">
                        <input type="hidden" id="dayOfWeek" name="dayOfWeek">
                        <div class="mb-3">
                            <label for="newStatus" class="form-label">Change Status:</label>
                            <select id="newStatus" name="newStatus" class="form-select">
                                <option value="Available">Available</option>
                                <option value="Busy">Busy</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Change Status</button>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>




    <script>
        function showPopup(hour, dayOfWeek, status, eventId) {
            console.log('dayOfWeek:', dayOfWeek); // Debugging the dayOfWeek parameter
            // Set the content of the popup
            document.getElementById('eventDetails').innerText = `Time: ${hour}:00 - ${hour + 1}:00\nDay: ${dayOfWeek}\nStatus: ${status}`;

            // Set the form fields
            document.getElementById('eventId').value = eventId;
            document.getElementById('newStatus').value = status;
            document.getElementById('hour').value = hour;
            document.getElementById('dayOfWeek').value = dayOfWeek;

            // Show the popup modal
            $('#popupModal').modal('show');
        }


        function submitChangeStatus(event) {
            event.preventDefault();
            const form = document.getElementById('changeStatusForm');
            const formData = new FormData(form);

            fetch('@Url.Action("ChangeStatus", "Employee")', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Status changed successfully!');
                        // Refresh only the affected parts of the calendar view if possible
                        location.reload();
                    } else {
                        alert('Failed to change status: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to change status: ' + error.message);
                });
        }

        function updateCalendarView(data) {
            // Clear existing calendar view data (if necessary)
            // Then, process the data to fill the cells with event statuses

            // Iterate through the data and update the cells in the view
            data.forEach(event => {
                const hour = eventTime.getHours(); // Get the hour from the event's time
                const dayOfWeek = eventTime.getDay(); // Get the day of the week from the event's time

                // Find the corresponding cell in the table based on hour and dayOfWeek
                const cell = document.querySelector(`td[data-hour="${hour}"][data-dayofweek="${dayOfWeek}"]`);

                if (cell) {
                    // Update the cell with the event's AvailabilityStatus
                    cell.textContent = event.AvailabilityStatus;
                }
            });
        }

    </script>

</body>

</html>
