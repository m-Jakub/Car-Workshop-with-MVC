@model Dictionary<DayOfWeek, Dictionary<int, List<CalendarEvent>>>


<!DOCTYPE html>
<html>

<head>

    <title>Ticket Placement</title>
    <style>
        /* Add border-collapse to the table */
        .table {
            border-collapse: collapse;
            width: 100%;
        }

        /* Style for table header */
        .table th {
            background-color: #f2f2f2;
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: left;
        }

        /* Style for table cells */
        .table td {
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: left;
        }

        /* Style for time column */
        .time-column {
            width: 120px;
        }

        /* Style for day columns */
        .day-column {
            width: calc((100% - 100px) / 7);
            /* Divide remaining width equally among day columns */
        }

        /* Style when hovering over a cell with the "available-cell" class */
        .day-column.available-cell:hover {
            background-color: #a0d0a0;
            /* Light green color */
        }

        /* Style for clicked acailable cells */
        td.day-column.clicked-cell {
            background-color: #a0d0a0;
            /* Light green color */
        }
        }
    </style>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</head>

<body>

    <h2>Choose the available time slots to place the ticket</h2>

    <table class="table">
        <thead>
            <tr>
                <th class="time-column">Time</th> <!-- Set fixed width for the time column -->
                @foreach (DayOfWeek dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
                {
                    <th class="day-column">@dayOfWeek.ToString().Substring(0, 3)</th>
                    <!-- Set fixed width for the day columns -->
                }
            </tr>
        </thead>

        <tbody>
            @for (int hour = 6; hour < 20; hour++)
            {
                <tr>
                    <td class="time-column">@hour:00 - @(hour + 1):00</td>
                    @foreach (DayOfWeek dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
                    {
                        // Retrieve the events for the day of the week and hour
                        var eventsForHour = Model.TryGetValue(dayOfWeek, out var eventsForDay)
                        && eventsForDay.TryGetValue(hour, out var events)
                        ? events
                        : new List<CalendarEvent>();

                        // Retrieve the event for the logged-in employee
                        var eventForHour = eventsForHour.FirstOrDefault();

                        // Render the cell based on the retrieved event
                        <td class="day-column @(eventForHour?.AvailabilityStatus == "Available" ? "available-cell" : "")"
                            onclick="handleCellClick(this, @hour, '@dayOfWeek', '@(eventForHour?.AvailabilityStatus ?? "Unavailable")', @(eventForHour?.CalendarEventId ?? 0))">
                            @if (eventForHour != null)
                            {
                                <div>@eventForHour.AvailabilityStatus</div>
                            }
                            else
                            {
                                <div class="empty-cell">&nbsp;</div> <!-- Placeholder for empty cell -->
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>

    </table>

    <!-- Button to submit the selected events -->
    <button type="button" onclick="submitSelectedEvents()" class="btn btn-primary">Submit Selected Events</button>

    <script>

        function submitChangeStatus(event) {
            event.preventDefault();
            const form = document.getElementById('changeStatusForm');
            const formData = new FormData(form);

            fetch('@Url.Action("ChangeStatus", "Employee")', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Status changed successfully!');
                        // Refresh only the affected parts of the calendar view if possible
                        location.reload();
                    } else {
                        alert('Failed to change status: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to change status: ' + error.message);
                });
        }

        function updateCalendarView(data) {
            // Iterate through the data and update the cells in the view
            data.forEach(event => {
                const hour = eventTime.getHours(); // Get the hour from the event's time
                const dayOfWeek = eventTime.getDay(); // Get the day of the week from the event's time

                // Find the corresponding cell in the table based on hour and dayOfWeek
                const cell = document.querySelector(`td[data-hour="${hour}"][data-dayofweek="${dayOfWeek}"]`);

                if (cell) {
                    // Update the cell with the event's AvailabilityStatus
                    cell.textContent = event.AvailabilityStatus;
                }
            });
        }

        // Retrieve the ticketId from ViewData, if available
        const ticketId = '@ViewData["TicketId"]' === '' ? null : '@ViewData["TicketId"]';

        // Initialize an array to store the selected events
        let selectedEvents = [];

        // Function to handle cell clicks
        function handleCellClick(cell, hour, dayOfWeek, status, eventId) {
            if (status === "Available") {
                // Toggle the clicked-cell class to mark the cell as clicked
                cell.classList.toggle('clicked-cell');

                // Check if the cell is now clicked
                const isClicked = cell.classList.contains('clicked-cell');

                if (isClicked) {
                    // Add the event to the list of selected events
                    selectedEvents.push({
                        eventId: eventId,
                        hour: hour,
                        dayOfWeek: dayOfWeek
                    });
                } else {
                    // Remove the event from the list of selected events
                    selectedEvents = selectedEvents.filter(event => event.eventId !== eventId);
                }
            }
        }

        // Function to submit the selected events
        function submitSelectedEvents() {
            // Validate selectedEvents and TicketId
            if (!selectedEvents.length) {
                alert("No events selected");
                return;
            }

            // Prepare the data to send
            const data = {
                TicketId: ticketId,
                EventIds: selectedEvents.map(event => event.eventId) // Map selected events to event IDs
            };

            // Log the data to ensure it's set correctly
            console.log("Data to be sent:", data);

            // Convert the data to a JSON object
            const jsonData = JSON.stringify(data);

            // Send an AJAX POST request to the controller
            fetch('@Url.Action("SubmitSelectedEvents", "Employee")', {
                method: 'POST',
                body: jsonData,
                headers: {
                    'Content-Type': 'application/json' // Set content type as JSON
                }
            })
                .then(response => response.json())
                .then(data => {
                    // Handle the response
                    if (data.success) {
                        alert('Events submitted successfully!');
                        // change locatiojn to Calendar view
                        window.location.href = '@Url.Action("Calendar", "Employee")';
                    } else {
                        alert('Failed to submit events: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to submit events: ' + error.message);
                });
        }



    </script>

</body>

</html>
